@page "/"
@using SalesOrders.Client.Service.OrdersService
@using SalesOrders.Shared.Orders.Models
@inject IOrderService Orders
@attribute [Authorize]


<PageTitle>Orders</PageTitle>

<div class="header">
    <div class="col">Order Number</div>
    <div class="col">Customer Name</div>
    <div class="col">Order Type</div>
    <div class="col">Created Date</div>
    <div class="col">Status</div>
    <div class="col">Actions</div> 
</div>

@foreach (var order in Orders.viewOrdersVMs)
{
    @if (order.isEditing)
    {
        <EditForm Model="editingOrder" OnSubmit="UpdateOrder">
            <div class="row">
                <div class="col">
                    <InputText @bind-Value="editingOrder.orderNumber" class="form-control"></InputText>
                </div>
                <div class="col">
                    <InputText @bind-Value="editingOrder.customerName" class="form-control"></InputText>
                </div>
                <div class="col">
                    <InputSelect @bind-Value="editingOrder.orderType" class="form-control">
                        <option value="">Select Order Type</option> <!-- Default option -->
                        <option value="Normal">Normal</option>
                        <option value="Staff">Staff</option>
                        <option value="Mechanical">Mechanical</option>
                        <option value="Perishable">Perishable</option>
                    </InputSelect>
                </div>

                <div class="col">
                    <input type="datetime-local" @bind="editingOrder.createdDate" class="form-control" />
                </div>

                <div class="col">
                    <InputSelect @bind-Value="editingOrder.orderStatus" class="form-control">
                        <option value="">Select Order Status</option> <!-- Default option -->
                        <option value="New">New</option>
                        <option value="Processing">Processing</option>
                        <option value="Complete">Complete</option>
                    </InputSelect>
                </div>

                <div class="col">
                    <button type="submit" class="btn btn-primary">
                        <i class="oi oi-cloud-upload"></i>
                    </button>
                    <button class="btn btn-primary" @onclick="CancelEditing">
                        <i class="oi oi-circle-x"></i>
                    </button>
                </div>
            </div>
        </EditForm>
    }
    else
    {
        <div class="row">
            <div class="col">
                @order.orderNumber
            </div>
            <div class="col">
                @order.customerName
            </div>
            <div class="col">
                @order.orderType
            </div>
            <div class="col">
                @order.createdDate.ToShortDateString()
            </div>
            <div class="col">
                @order.orderStatus
            </div>

            <div class="col">
                <button class="btn btn-primary" @onclick="(() => EditOrder(order))">
                    <i class="oi oi-pencil"></i>
                </button>
                <button class="btn btn-primary" @onclick="(() => DeleteOrder(order.orderId))">
                    <i class="oi oi-trash"></i>
                </button>
                <button class="btn btn-secondary" @onclick="(() => ToggleOrderLines(order))">
                    <i class="oi oi-chevron-down"></i> View Order Lines
                </button>
            </div>
            @if (order.showOrderLines)
            {
                <div class="row">
                    <strong>Order Lines:</strong>
                </div>

                @foreach (var line in order.orderLines)
                {
                    if (line.isEditing)
                    {
                        <EditForm Model="@line" OnSubmit="() => UpdateOrderLine(line)">
                            <div class="row">
                                <div class="col">
                                    <InputText @bind-Value="line.productCode" class="form-control"></InputText>
                                </div>
                                <div class="col">
                                    <InputText @bind-Value="line.productType" class="form-control"></InputText>
                                </div>
                                <div class="col">
                                    <InputNumber @bind-Value="line.quantity" class="form-control"></InputNumber>
                                </div>
                                <div class="col">
                                    <InputNumber @bind-Value="line.costPrice" class="form-control"></InputNumber>
                                </div>
                                <div class="col">
                                    <InputNumber @bind-Value="line.salesPrice" class="form-control"></InputNumber>
                                </div>

                                <div class="col">
                                    <button type="submit" class="btn btn-primary">
                                        Save
                                    </button>
                                    <button type="button" class="btn btn-secondary" @onclick="() => CancelOrderLineEdit(line)">
                                        Cancel
                                    </button>
                                </div>
                            </div>
                        </EditForm>
                    }
                    else
                    {
                        <div class="row">
                            <div class="col">Line #: @line.lineNumber</div>
                            <div class="col">Product Code: @line.productCode</div>
                            <div class="col">Product Type: @line.productType</div>
                            <div class="col">Quantity: @line.quantity</div>
                            <div class="col">Cost Price: @line.costPrice</div>
                            <div class="col">Sales Price: @line.salesPrice</div>

                            <div class="col">
                                <button class="btn btn-primary" @onclick="() => EditOrderLine(line)">
                                    Edit
                                </button>
                            </div>
                        </div>
                    }
                }
            }

        </div>
    }
}

@* <button class="btn btn-primary" @onclick="CreateNewCategory">
    <i class="oi oi-plus"></i> Add new category
</button>
 *@
@code {
    private viewOrdersFilters filters = new viewOrdersFilters();
    viewOrdersVM editingOrder = null;
    private bool isLoading = true;
    private string errorMessage = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            filters.orderType = string.Empty;
            filters.from = DateTime.MinValue;
            filters.to = DateTime.MinValue;
            filters.productCode = string.Empty;

            await Orders.GetOrders(filters);
            Orders.OnChange += StateHasChanged;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void EditOrder(viewOrdersVM order)
    {
        order.isEditing = true;
        editingOrder = order;
    }

    private async Task UpdateOrder()
    {
        if (editingOrder.isNew)
        {
            await Orders.AddOrder(editingOrder);
        }
        else
        {
            await Orders.UpdateOrder(editingOrder);
            editingOrder = new viewOrdersVM();
        }
    }

    private async Task CancelEditing()
    {
        editingOrder = new viewOrdersVM();
        isLoading = true;
        filters.orderType = string.Empty;
        filters.from = DateTime.MinValue;
        filters.to = DateTime.MinValue;
        filters.productCode = string.Empty;

        await Orders.GetOrders(filters);
    }

    private async Task DeleteOrder(long id)
    {
        // Delete logic here
    }

    private void ToggleOrderLines(viewOrdersVM order)
    {
        order.showOrderLines = !order.showOrderLines; // Toggle the visibility of the order lines
    }

    private void CreateNewOrder(viewOrdersVM order)
    {
        // editingOrder = Orders.AddOrder(order);
    }

    private void EditOrderLine(OrderLineVM line)
    {
        line.isEditing = true;  // Set the order line to editing mode
    }

    private async Task UpdateOrderLine(OrderLineVM line)
    {
        line.isEditing = false;  // Exit editing mode after saving
                                 // Implement logic to update the order line in the database or API call here
    }

    private void CancelOrderLineEdit(OrderLineVM line)
    {
        line.isEditing = false;  // Exit editing mode without saving
                                 // Optionally, restore the original values if needed
    }
}

<style>
    .header, .row {
        display: flex;
        padding: 8px;
    }

    .col {
        flex: 1;
        padding: 8px;
    }

        .col:last-child {
            text-align: right;
        }

    .btn {
        margin-left: 4px;
    }

    .header .col {
        font-weight: bold;
        border-bottom: 2px solid lightgray;
    }

   
</style>
