@page "/"
@using SalesOrders.Client.Components
@using SalesOrders.Client.Service.OrdersService
@using SalesOrders.Shared.Orders.Models
@using System.Security.Claims
@inject IOrderService Orders
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize]
@implements IDisposable

<PageTitle>Orders</PageTitle>

<EditForm Model="@filters">
    <div class="row">
        <div class="col">
            <InputSelect @bind-Value="filters.orderType" class="form-control">
                <option value="">All Types</option>
                <option value="Normal">Normal</option>
                <option value="Staff">Staff</option>
                <option value="Mechanical">Mechanical</option>
                <option value="Perishable">Perishable</option>
            </InputSelect>
        </div>
        <div class="col">
            <input type="date" @bind="filters.from" class="form-control" placeholder="From Date" />
        </div>
        <div class="col">
            <input type="date" @bind="filters.to" class="form-control" placeholder="To Date" />
        </div>
    @*     <div class="col">
            <InputText @bind-Value="filters.productCode" class="form-control" placeholder="Product Code" />
        </div> *@
        <div class="col">
            <InputText @bind-Value="searchQuery" class="form-control" placeholder="Search by Product Code" />
        </div>
        <div class="col">
            <button class="btn btn-primary" @onclick="ApplyFilters">Apply Filters</button>
        </div>
    </div>
</EditForm>


<div class="header">
    <div class="col">Order Number</div>
    <div class="col">Customer Name</div>
    <div class="col">Order Type</div>
    <div class="col">Created Date</div>
    <div class="col">Status</div>
    <div class="col">Actions</div> 
</div>

@if (Orders.viewOrdersVMs == null)
{
    <span>Loading Order...</span>
}
else
{
    @foreach (var order in Orders.viewOrdersVMs)
    {
        @if (order.isEditing)
        {
            <EditForm Model="editingOrder" OnSubmit="UpdateOrder">
                <div class="row">
                    <div class="col">
                        <InputText @bind-Value="editingOrder.orderNumber" class="form-control"></InputText>
                    </div>
                    <div class="col">
                        <InputText @bind-Value="editingOrder.customerName" class="form-control"></InputText>
                    </div>
                    <div class="col">
                        <InputSelect @bind-Value="editingOrder.orderType" class="form-control">
                            
                            <option value="Normal">Normal</option>
                            <option value="Staff">Staff</option>
                            <option value="Mechanical">Mechanical</option>
                            <option value="Perishable">Perishable</option>
                        </InputSelect>
                    </div>

                    <div class="col">
                        <input type="datetime-local" @bind="editingOrder.createdDate" class="form-control" />
                    </div>

                    <div class="col">
                        <InputSelect @bind-Value="editingOrder.orderStatus" class="form-control">
                            
                            <option value="New">New</option>
                            <option value="Processing">Processing</option>
                            <option value="Complete">Complete</option>
                        </InputSelect>
                    </div>

                    <div class="col">
                        <button type="submit" class="btn btn-primary" disabled="@(!isAdmin)" title="@(!isAdmin ? "You don't have permission to perform this task" : null)">
                            <i class="oi oi-cloud-upload"></i>
                        </button>
                        <button class="btn btn-primary" @onclick="CancelEditing" disabled="@(!isAdmin)" title="@(!isAdmin ? "You don't have permission to perform this task" : null)">
                            <i class="oi oi-circle-x"></i>
                        </button>
                    </div>
                </div>
            </EditForm>
        }
        else
        {
            <div class="row">
                <div class="col">
                    @order.orderNumber
                </div>
                <div class="col">
                    @order.customerName
                </div>
                <div class="col">
                    @order.orderType
                </div>
                <div class="col">
                    @order.createdDate.ToShortDateString()
                </div>
                <div class="col">
                    @order.orderStatus
                </div>

                <div class="col" title="@(!isAdmin ? "You don't have permission to perform this task" : null)">
                    <button class="btn btn-primary" @onclick="(() => EditOrder(order))" disabled="@(!isAdmin)" title="@(!isAdmin ? "You don't have permission to perform this task" : null)">
                        <i class="oi oi-pencil"></i>
                    </button>
                    @* <button class="btn btn-primary" @onclick="(() => DeleteOrder(order.orderId))" disabled="@(!isAdmin)" title="@(!isAdmin ? "You don't have permission to perform this task" : null)">
        <i class="oi oi-trash"></i>
        </button> *@

                    <button class="btn btn-primary" @onclick="@((e) => OpenDeleteDialog(order))" disabled="@(!isAdmin)" title="@(!isAdmin ? "You don't have permission to perform this task" : null)">
                        <i class="oi oi-trash"></i>
                    </button>

                    <button class="btn btn-secondary" @onclick="(() => ToggleOrderLines(order))" title="View Order Lines">
                        <i class="oi oi-chevron-down"></i> View Order Lines
                    </button>
                </div>
                @if (order.showOrderLines)
                {
                    <div class="row">
                        <strong>Order Lines:</strong>
                    </div>

                    @foreach (var line in order.orderLines)
                    {
                        if (line.isEditing)
                        {
                            <EditForm Model="@line" OnSubmit="() => UpdateOrderLine(line)">
                                <div class="row">
                                    <div class="col">
                                        <InputText @bind-Value="line.productCode" class="form-control"></InputText>
                                    </div>
                                    <div class="col">

                                        <InputSelect @bind-Value="line.productType" class="form-control">

                                            <option value="Apparel">Apparel</option>
                                            <option value="Parts">Parts</option>
                                            <option value="Equipment">Equipment</option>
                                            <option value="Motor">Motor</option>
                                        </InputSelect>

                                    </div>
                                    <div class="col">
                                        <InputNumber @bind-Value="line.quantity" class="form-control"></InputNumber>
                                    </div>
                                    <div class="col">
                                        <InputNumber @bind-Value="line.costPrice" class="form-control"></InputNumber>
                                    </div>
                                    <div class="col">
                                        <InputNumber @bind-Value="line.salesPrice" class="form-control"></InputNumber>
                                    </div>

                                    <div class="col">
                                        <button type="submit" class="btn btn-primary">
                                            Save
                                        </button>
                                        <button type="button" class="btn btn-secondary" @onclick="() => CancelOrderLineEdit(line)">
                                            Cancel
                                        </button>
                                    </div>
                                </div>
                            </EditForm>
                        }
                        else
                        {
                            <div class="row">
                                <div class="col">Line #: @line.lineNumber</div>
                                <div class="col">Product Code: @line.productCode</div>
                                <div class="col">Product Type: @line.productType</div>
                                <div class="col">Quantity: @line.quantity</div>
                                <div class="col">Cost Price: @line.costPrice</div>
                                <div class="col">Sales Price: @line.salesPrice</div>

                                <div class="col">
                                    <button class="btn btn-primary" @onclick="() => EditOrderLine(line)">
                                        Edit
                                    </button>
                                </div>
                            </div>
                        }
                    }
                }

            </div>
        }
    }

    <button class="btn btn-primary" @onclick="CreateNewOrder">
        <i class="oi oi-plus"></i> Add new sales order
    </button>

}

 
@code {
    [Inject]
    public IDialogService DialogService { get; set; }
    private viewOrdersFilters filters = new viewOrdersFilters();
    viewOrdersVM editingOrder = null;
    OrderLineVM orderLine = null;
    private bool isLoading = true;
    private string errorMessage = null;
    private string role = null;
    private bool isAdmin = false;
    private string searchQuery = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            // Check if the user is authenticated and retrieve the user's role
            if (user.Identity.IsAuthenticated)
            {
                role = user.Claims
                        .Where(c => c.Type == ClaimTypes.Role || c.Type == "role")
                        .Select(c => c.Value).FirstOrDefault();
                isAdmin = role == "Admin";
            }

            filters.orderType = string.Empty;
            filters.from = DateTime.MinValue;
            filters.to = DateTime.MinValue;
            filters.productCode = string.Empty;

            await Orders.GetOrders(filters);
            Orders.OnChange += StateHasChanged;
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Snackbar.Add($"Error loading sales orders: {ex.Message}", severity: Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task ApplyFilters()
    {
        isLoading = true;
        try
        {
            if (!string.IsNullOrEmpty(searchQuery))
            {
                filters.productCode = searchQuery;
            }
            await Orders.GetOrders(filters); // Use updated filter values
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task CreateNewOrder()
    {
        var options = new DialogOptions
            {
                FullScreen = false,
                DisableBackdropClick = false,
                CloseButton = true,
                MaxWidth = MaxWidth.Large,
            };

        var dialog = DialogService.Show<AddSalesOrder>("Add Order", options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            editingOrder = new viewOrdersVM();
            isLoading = true;
            filters.orderType = string.Empty;
            filters.from = DateTime.MinValue;
            filters.to = DateTime.MinValue;
            filters.productCode = string.Empty;

            await Orders.GetOrders(filters);
        }
    }

    public void Dispose()
    {
        Orders.OnChange -= StateHasChanged;
    }

    private void EditOrder(viewOrdersVM order)
    {
        order.isEditing = true;
        editingOrder = order;
    }

    private async Task UpdateOrder()
    {
        try
        {
            if (editingOrder.isNew)
            {

                await Orders.AddOrder(editingOrder);
            }
            else
            {
                await Orders.UpdateOrder(editingOrder);
                Snackbar.Add("Order Updated Successfully", Severity.Success);

            }

            editingOrder = new viewOrdersVM();  // Clear the form after update
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to update order: {ex.Message}", severity: Severity.Error);
        }
    }

    private async Task CancelEditing()
    {
        editingOrder = new viewOrdersVM();
        isLoading = true;
        filters.orderType = string.Empty;
        filters.from = DateTime.MinValue;
        filters.to = DateTime.MinValue;
        filters.productCode = string.Empty;

        await Orders.GetOrders(filters);
    }

    private async Task OpenDeleteDialog(viewOrdersVM order)
    {
        editingOrder = order;
        var options = new DialogOptions
            {

                DisableBackdropClick = false,
                CloseButton = true,
            };

        var parameters = new DialogParameters
        {
            { "viewOrders", editingOrder }
        };

        var dialog = DialogService.Show<DeleteSalesOrder>("Delete Order", parameters, options);

        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            editingOrder = new viewOrdersVM();
            isLoading = true;
            filters.orderType = string.Empty;
            filters.from = DateTime.MinValue;
            filters.to = DateTime.MinValue;
            filters.productCode = string.Empty;

            await Orders.GetOrders(filters);
        }
    }

    private async Task DeleteOrder(long id)
    {
        try
        {
            await Orders.DeleteOrder(id);
            Snackbar.Add("Order deleted Successfully", Severity.Success);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Snackbar.Add($"Error deleting sales orders, please try again: {ex.Message}", severity: Severity.Error);
        }
    }

    private void ToggleOrderLines(viewOrdersVM order)
    {
        order.showOrderLines = !order.showOrderLines; // Toggle the visibility of the order lines
    }

 

    private void EditOrderLine(OrderLineVM line)
    {
        line.isEditing = true;  // Set the order line to editing mode
    }

    private async Task UpdateOrderLine(OrderLineVM line)
    {
        try
        {
            await Orders.UpdateOrderLine(line);
            Snackbar.Add("Order Line Item Updated Successfully", Severity.Success);
            line.isEditing = false;  // Set the order line back to view mode after saving
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to update order line item: {ex.Message}", severity: Severity.Error);
        }
   
    }

    private void CancelOrderLineEdit(OrderLineVM line)
    {
        line.isEditing = false;  // Exit editing mode without saving
                                 // Optionally, restore the original values if needed
    }
}

<style>
    .header, .row {
        display: flex;
        padding: 8px;
    }

    .col {
        flex: 1;
        padding: 8px;
    }

        .col:last-child {
            text-align: right;
        }

    .btn {
        margin-left: 4px;
    }

    .header .col {
        font-weight: bold;
        border-bottom: 2px solid lightgray;
    }

   
</style>
