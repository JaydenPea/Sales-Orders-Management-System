@page "/counter"
@using MudBlazor
@inject ISnackbar Snackbar

<MudTable Items="@Orders" Dense="@dense" Hover="@hover" ReadOnly="@ronly" CanCancelEdit="@canCancelEdit" Filter="new Func<Order,bool>(FilterFunc)"
          @bind-SelectedItem="selectedOrder" SortLabel="Sort By" CommitEditTooltip="Commit Edit"
          OnCommitEditClick="@(() => Snackbar.Add("Commit Edit Handler Invoked"))" RowEditPreview="BackupItem" RowEditCancel="ResetItemToOriginalValues"
          RowEditCommit="ItemHasBeenCommitted" IsEditRowSwitchingBlocked="@blockSwitch" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Orders</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search Orders" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <ColGroup>
        <col style="width:50px;" />
        <col style="width:50px;" />
        <col style="width:80px;" />
        <col style="width:50%;" />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>Order Number</MudTh>
        <MudTh>Customer Name</MudTh>
        <MudTh>Order Type</MudTh>
        <MudTh>Created Date</MudTh>
        <MudTh>Status</MudTh>
    </HeaderContent>
    <RowTemplate Context="order">
        <MudTd DataLabel="Order Number">@order.OrderNumber</MudTd>
        <MudTd DataLabel="Customer Name">@order.CustomerName</MudTd>
        <MudTd DataLabel="Order Type">@order.OrderType</MudTd>
        <MudTd DataLabel="Created Date">@order.CreatedDate.ToShortDateString()</MudTd>
        <MudTd DataLabel="Status">@order.OrderStatus</MudTd>

        <MudExpansionPanel Text="View Order Lines">
            <MudTable Items="@order.OrderLines" Dense="true" Hover="true" ReadOnly="false">
                <HeaderContent>
                    <MudTh>Line Number</MudTh>
                    <MudTh>Product Code</MudTh>
                    <MudTh>Product Type</MudTh>
                    <MudTh>Cost Price</MudTh>
                    <MudTh>Sales Price</MudTh>
                    <MudTh>Quantity</MudTh>
                </HeaderContent>
                <RowTemplate Context="line">
                    <MudTd DataLabel="Line Number">@line.LineNumber</MudTd>
                    <MudTd DataLabel="Product Code">@line.ProductCode</MudTd>
                    <MudTd DataLabel="Product Type">@line.ProductType</MudTd>
                    <MudTd DataLabel="Cost Price">@line.CostPrice</MudTd>
                    <MudTd DataLabel="Sales Price">@line.SalesPrice</MudTd>
                    <MudTd DataLabel="Quantity">@line.Quantity</MudTd>
                </RowTemplate>
            </MudTable>
        </MudExpansionPanel>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private List<Order> Orders = new();
    private bool dense = false;
    private bool hover = true;
    private bool ronly = false;
    private bool canCancelEdit = false;
    private bool blockSwitch = false;
    private string searchString = "";
    private Order selectedOrder = null;
    private Order orderBeforeEdit;


    protected override void OnInitialized()
    {
        // Populate with demo data
        Orders = new List<Order>
        {
            new Order
            {
                OrderNumber = "SO625144",
                CustomerName = "KFC",
                OrderType = "Normal",
                CreatedDate = new DateTime(2018, 03, 08),
                OrderStatus = "New",
                OrderLines = new List<OrderLine>
                {
                    new OrderLine { LineNumber = 1, ProductCode = "GSX837420", ProductType = "Parts", CostPrice = 13.54m, SalesPrice = 84.49m, Quantity = 10 },
                    new OrderLine { LineNumber = 2, ProductCode = "AVF697420", ProductType = "Apparel", CostPrice = 19.34m, SalesPrice = 105.99m, Quantity = 25 }
                }
            },
            new Order
            {
                OrderNumber = "SO625145",
                CustomerName = "Nandos",
                OrderType = "Normal",
                CreatedDate = new DateTime(2018, 03, 09),
                OrderStatus = "New",
                OrderLines = new List<OrderLine>
                {
                    new OrderLine { LineNumber = 1, ProductCode = "YTS786663", ProductType = "Parts", CostPrice = 8.44m, SalesPrice = 49.22m, Quantity = 2 },
                    new OrderLine { LineNumber = 2, ProductCode = "UYT485911", ProductType = "Equipment", CostPrice = 41.57m, SalesPrice = 250.45m, Quantity = 12 }
                }
            }
        };
    }

    private void BackupItem(object order)
    {
        orderBeforeEdit = new Order
            {
                OrderNumber = ((Order)order).OrderNumber,
                CustomerName = ((Order)order).CustomerName,
                OrderType = ((Order)order).OrderType,
                CreatedDate = ((Order)order).CreatedDate,
                OrderStatus = ((Order)order).OrderStatus,
                OrderLines = ((Order)order).OrderLines.Select(line => new OrderLine
                {
                    LineNumber = line.LineNumber,
                    ProductCode = line.ProductCode,
                    ProductType = line.ProductType,
                    CostPrice = line.CostPrice,
                    SalesPrice = line.SalesPrice,
                    Quantity = line.Quantity
                }).ToList()
            };
    }

    private void ItemHasBeenCommitted(object order)
    {
        Snackbar.Add($"Changes to Order {((Order)order).OrderNumber} committed", Severity.Success);
    }

    private void ResetItemToOriginalValues(object order)
    {
        ((Order)order).OrderNumber = orderBeforeEdit.OrderNumber;
        ((Order)order).CustomerName = orderBeforeEdit.CustomerName;
        ((Order)order).OrderType = orderBeforeEdit.OrderType;
        ((Order)order).CreatedDate = orderBeforeEdit.CreatedDate;
        ((Order)order).OrderStatus = orderBeforeEdit.OrderStatus;
        ((Order)order).OrderLines = orderBeforeEdit.OrderLines;
        Snackbar.Add($"Editing of Order {((Order)order).OrderNumber} canceled", Severity.Warning);
    }

    private bool FilterFunc(Order order)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (order.OrderNumber.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (order.CustomerName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    public class Order
    {
        public string OrderNumber { get; set; }
        public string CustomerName { get; set; }
        public string OrderType { get; set; }
        public DateTime CreatedDate { get; set; }
        public string OrderStatus { get; set; }
        public List<OrderLine> OrderLines { get; set; }
    }

    public class OrderLine
    {
        public int LineNumber { get; set; }
        public string ProductCode { get; set; }
        public string ProductType { get; set; }
        public decimal CostPrice { get; set; }
        public decimal SalesPrice { get; set; }
        public int Quantity { get; set; }
    }
}
